{
  "project_environment_troubleshooting": {
    "name": "项目环境排查助手",
    "description": "系统性排查和解决老项目环境配置问题",
    "template": "帮我排查这个项目的环境配置问题。请按以下步骤进行系统性分析：\n\n## 📋 第一步：收集基础信息\n\n请提供以下信息（我将逐步分析）：\n\n1. **项目信息**：\n   - 项目根目录的 package.json 文件内容\n   - 是否存在 package-lock.json 或 yarn.lock 文件\n   - 项目技术栈（Vue2/Vue3/Taro/小程序等）\n\n2. **环境信息**：\n   - 当前 Node.js 版本 (`node -v`)\n   - 当前 npm/yarn 版本 (`npm -v` 或 `yarn -v`)\n   - 操作系统（Windows/macOS/Linux）\n\n3. **问题描述**：\n   - 具体的报错信息（完整错误日志）\n   - 执行的命令（npm install, npm run dev 等）\n   - 问题出现的环节（安装依赖、启动项目、打包构建）\n\n## 🔍 第二步：问题诊断分析\n\n我将基于你们团队的技术栈重点检查：\n\n**Vue2项目常见问题：**\n- node-sass 版本与 Node 版本兼容性\n- webpack 4.x 配置问题\n- Element UI 等依赖版本冲突\n\n**Vue3项目常见问题：**\n- Vite 版本要求\n- TypeScript 配置兼容性\n- 组合式API相关包版本\n\n**Taro项目特殊检查：**\n- Taro CLI 版本与 Node 版本匹配\n- 多端构建配置问题\n- 原生模块编译问题\n\n**小程序项目分析：**\n- 开发者工具版本要求\n- npm 构建配置检查\n- 平台差异处理\n\n## 🛠️ 第三步：提供解决方案\n\n基于诊断结果，我将提供：\n\n1. **推荐的 Node 版本**（基于项目依赖分析）\n2. **详细的修复步骤**（针对具体问题）\n3. **环境配置文档**（供团队成员参考）\n4. **预防措施**（避免类似问题）\n\n## 📝 第四步：生成项目环境说明\n\n最终输出标准化的环境配置文档，包含：\n- 环境要求说明\n- 快速启动步骤\n- 常见问题解决方案\n- 团队开发环境统一建议\n\n---\n\n请先提供第一步要求的基础信息，我将开始分析。\n\n{context}",
    "tags": [
      "环境配置",
      "问题排查",
      "团队协作",
      "老项目维护"
    ]
  }
}
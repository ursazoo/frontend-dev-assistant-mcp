{
  "git_commit": {
    "name": "Git 代码提交助手",
    "description": "帮助开发者分批次、规范化提交代码",
    "template": "帮我分批次提交代码。请先检查 git status，然后分析所有未暂存的修改，并提供一个完整的提交计划。\n\n提交规范：\n- **标题格式**：`类型: 简短描述`（不超过50字符）\n- **类型**：feat/fix/docs/style/refactor/test/chore/config\n- **描述**：使用中文，简洁明了\n- **详细信息**：如需要，放在commit body中\n\n计划应包含：\n1. 每个批次要提交的文件列表\n2. 为每个批次建议简洁的 commit message\n\n示例格式：\n- `feat: 新增用户登录功能`\n- `fix: 修复数据加载异常`\n- `docs: 更新API文档`\n- `refactor: 优化组件结构`\n\n请等待我确认计划后再执行 git 命令。\n\n注意事项：\n- 遵循 Conventional Commits 规范\n- commit message 使用中文描述\n- 按功能模块合理分组\n- 避免混合不相关的改动\n\n{context}",
    "usage_count": 9,
    "last_used": "2025-06-03T01:31:17.766532",
    "tags": [
      "git",
      "提交",
      "代码管理"
    ]
  },
  "code_review": {
    "name": "代码审查助手",
    "description": "基于团队规范进行代码质量审查",
    "template": "根据前端代码规范对以下代码进行 code review，主要关注：\n\n规范检查：\n1. **魔法值处理**：是否存在硬编码的数字、字符串等魔法值\n2. **常量定义**：常量是否正确定义和使用\n3. **方法注释**：方法是否有完整的JSDoc注释\n4. **命名规范**：变量、方法、组件命名是否符合规范\n5. **代码结构**：是否遵循团队约定的代码组织结构\n\n业务逻辑检查：\n1. **错误处理**：是否有适当的错误边界和异常处理\n2. **性能优化**：是否存在明显的性能问题\n3. **可维护性**：代码是否易于理解和维护\n4. **测试覆盖**：是否遗漏重要的测试场景\n\n请提供具体的改进建议和示例代码。\n\n参考编码规范：\n- 使用 PascalCase 命名组件\n- 使用 camelCase 命名变量和方法\n- 常量使用 UPPER_SNAKE_CASE\n- 方法必须有 JSDoc 注释\n- 避免使用魔法值，定义为常量\n\n{context}",
    "usage_count": 2,
    "last_used": "2025-06-02T22:54:09.404773",
    "tags": [
      "代码审查",
      "质量检查",
      "规范"
    ]
  },
  "component_reuse": {
    "name": "组件复用助手",
    "description": "帮助快速定位和复用项目中的现有组件",
    "template": "帮我复用项目中的{component_type}组件。\n\n请执行以下步骤：\n\n1. **查找现有组件**：\n   - 在项目的 components 目录下查找相关组件\n   - 分析组件的 props 接口和使用方式\n   - 确定组件的适用场景\n\n2. **生成使用代码**：\n   - 提供完整的引入语句\n   - 展示基本使用示例\n   - 说明主要 props 的作用和类型\n\n3. **定制建议**：\n   - 如果现有组件不完全匹配需求，提供修改建议\n   - 建议如何扩展组件功能\n   - 提醒注意事项和最佳实践\n\n搜索关键词：{keywords}\n\n期望功能：{expected_features}\n\n请在指定位置生成对应的代码，并确保：\n- 正确引入组件依赖\n- 使用符合团队规范的代码风格\n- 添加必要的注释说明\n\n{context}",
    "usage_count": 0,
    "last_used": null,
    "tags": [
      "组件复用",
      "代码生成",
      "效率工具"
    ]
  },
  "vue_component_spec": {
    "name": "Vue组件规范生成",
    "description": "基于团队编码规范生成标准Vue组件",
    "template": "请基于团队编码规范生成一个{vue_version} {component_type}组件。\n\n组件要求：\n- 组件名称：{component_name}\n- Vue版本：{vue_version}\n- 组件类型：{component_type}\n\n编码规范要求：\n1. **命名规范**：\n   - 组件使用 PascalCase\n   - props 使用 camelCase\n   - 事件使用 kebab-case\n   - 插槽使用 kebab-case\n\n2. **结构规范**：\n   - 使用 <script setup> 语法（Vue3）\n   - props 必须定义类型和默认值\n   - 导出的方法需要 JSDoc 注释\n   - 样式使用 scoped\n\n3. **代码质量**：\n   - 添加适当的类型检查\n   - 包含错误边界处理\n   - 支持响应式设计\n   - 遵循无障碍规范\n\n4. **注释要求**：\n   - 组件顶部添加功能说明\n   - 复杂逻辑添加行内注释\n   - props 添加描述注释\n\n组件功能特性：{features}\n\n请生成完整的组件代码，包括：\n- 完整的 Vue 单文件组件\n- TypeScript 类型定义（如适用）\n- 使用示例和文档\n\n{context}",
    "usage_count": 2,
    "last_used": "2025-06-02T22:54:09.406255",
    "tags": [
      "Vue组件",
      "代码生成",
      "编码规范"
    ]
  }
}